print(poi.bsrr)
summary(poi.bss)
summary(poi.bsrr)
pred.bss <- predict(poi.bss, newx = x_new)
pred.bsrr <- predict(poi.bsrr, newx = x_new)
# generate plots
plot(poi.bss, type = "both", breaks = TRUE)
plot(poi.bsrr)
#-------------------coxph model--------
Data <- gen.data(n, p, k, rho, family = "cox", scal = 10, beta = Tbeta)
x <- Data$x[1:140, ]
y <- Data$y[1:140, ]
x_new <- Data$x[141:200, ]
y_new <- Data$y[141:200, ]
cox.bss <- bess(x, y, family = "cox")
lambda.list <- exp(seq(log(5), log(0.1), length.out = 10))
cox.bsrr <- bess(x, y, type = "bsrr", family = "cox", lambda.list = lambda.list)
coef(cox.bss)
coef(cox.bsrr)
print(cox.bss)
print(cox.bsrr)
summary(cox.bss)
summary(cox.bsrr)
pred.bss <- predict(cox.bss, newx = x_new)
pred.bsrr <- predict(cox.bsrr, newx = x_new)
# generate plots
plot(cox.bss, type = "both", breaks = TRUE)
plot(cox.bsrr)
document()
check()
check()
check()
library(devtools)
document()
check_rhub()
check_rhub()
devtools::check_rhub()
library(devtools)
rhub::check
?rhub::check
rhub::checkï¼ˆ
rhub::check()
release()
library(rhub)
?check
rhub::check(platform = c(13,17,18,1))
rhub::check()
check_rhub()
release()
check_win_devel()
check_win_devel()
library(devtools)
check_win_devel()
release()
document()
document()
check()
library(bestridge)
library(bestridge)
data("trim32", package = "bestridge")
y <- trim32[, 1]
x <- as.matrix(trim32[, -1])
lm.bsrr <- bsrr(x, y)
type = 'bsrr'
source('C:/Users/test/OneDrive/coding/bestridge/bestridge/R/bsrr.R', echo=TRUE)
lm.bsrr <- bsrr(x, y)
source('C:/Users/test/OneDrive/coding/bestridge/bestridge/R/bsrr.R', echo=TRUE)
lm.bsrr <- bsrr(x, y)
library(bestridge)
check()
check()
check()
check()
library(bestridge)
n <- 200
p <- 20
k <- 5
rho <- 0.4
seed <- 10
Tbeta <- rep(0, p)
Tbeta[1:k*floor(p/k):floor(p/k)] <- rep(1, k)
Data <- gen.data(n, p, k, rho, family = "gaussian", beta = Tbeta, seed = seed)
x <- Data$x[1:140, ]
y <- Data$y[1:140]
x_new <- Data$x[141:200, ]
y_new <- Data$y[141:200]
lambda.list <- exp(seq(log(5), log(0.1), length.out = 10))
lm.bsrr <- bsrr(x, y, method = "pgsection")
coef(lm.bsrr)
print(lm.bsrr)
summary(lm.bsrr)
pred.bsrr <- predict(lm.bsrr, newx = x_new)
library(bestridge)
n <- 200
p <- 20
k <- 5
rho <- 0.4
seed <- 10
Tbeta <- rep(0, p)
Tbeta[1:k*floor(p/k):floor(p/k)] <- rep(1, k)
Data <- gen.data(n, p, k, rho, family = "gaussian", beta = Tbeta, seed = seed)
x <- Data$x[1:140, ]
y <- Data$y[1:140]
x_new <- Data$x[141:200, ]
y_new <- Data$y[141:200]
lambda.list <- exp(seq(log(5), log(0.1), length.out = 10))
lm.bsrr <- bsrr(x, y, method = "pgsection")
coef(lm.bsrr)
print(lm.bsrr)
summary(lm.bsrr)
pred.bsrr <- predict(lm.bsrr, newx = x_new)
library(bestridge)
n <- 200
p <- 20
k <- 5
rho <- 0.4
seed <- 10
Tbeta <- rep(0, p)
Tbeta[1:k*floor(p/k):floor(p/k)] <- rep(1, k)
Data <- gen.data(n, p, k, rho, family = "gaussian", beta = Tbeta, seed = seed)
x <- Data$x[1:140, ]
y <- Data$y[1:140]
x_new <- Data$x[141:200, ]
y_new <- Data$y[141:200]
lambda.list <- exp(seq(log(5), log(0.1), length.out = 10))
lm.bsrr <- bsrr(x, y, method = "pgsection")
coef(lm.bsrr)
print(lm.bsrr)
summary(lm.bsrr)
pred.bsrr <- predict(lm.bsrr, newx = x_new)
plot(lm.bsrr)
Data <- gen.data(n, p, k, rho, family = "binomial", beta = Tbeta, seed = seed)
x <- Data$x[1:140, ]
y <- Data$y[1:140]
x_new <- Data$x[141:200, ]
y_new <- Data$y[141:200]
lambda.list <- exp(seq(log(5), log(0.1), length.out = 10))
logi.bsrr <- bsrr(x, y, family = "binomial", lambda.list = lambda.list)
coef(logi.bsrr)
print(logi.bsrr)
summary(logi.bsrr)
pred.bsrr <- predict(logi.bsrr, newx = x_new)
# generate plots
plot(logi.bsrr)
#-------------------poisson model----------------------#
Data <- gen.data(n, p, k, rho=0.3, family = "poisson", beta = Tbeta, seed = seed)
x <- Data$x[1:140, ]
y <- Data$y[1:140]
x_new <- Data$x[141:200, ]
y_new <- Data$y[141:200]
lambda.list <- exp(seq(log(5), log(0.1), length.out = 10))
poi.bsrr <- bsrr(x, y, family = "poisson", lambda.list = lambda.list)
coef(poi.bsrr)
print(poi.bsrr)
summary(poi.bsrr)
pred.bsrr <- predict(poi.bsrr, newx = x_new)
# generate plots
plot(poi.bsrr)
Data <- gen.data(n, p, k, rho, family = "cox", scal = 10, beta = Tbeta)
x <- Data$x[1:140, ]
y <- Data$y[1:140, ]
x_new <- Data$x[141:200, ]
y_new <- Data$y[141:200, ]
lambda.list <- exp(seq(log(5), log(0.1), length.out = 10))
cox.bsrr <- bsrr(x, y, family = "cox", lambda.list = lambda.list)
coef(cox.bsrr)
print(cox.bsrr)
summary(cox.bsrr)
pred.bsrr <- predict(cox.bsrr, newx = x_new)
# generate plots
plot(cox.bsrr)
beta <- rep(c(rep(1,2),rep(0,3)), 4)
Data <- gen.data(200, 20, 5, rho=0.4, beta = beta, seed =10)
x <- Data$x
y <- Data$y
group.index <- c(rep(1, 2), rep(2, 3), rep(3, 2), rep(4, 3),
rep(5, 2), rep(6, 3), rep(7, 2), rep(8, 3))
lm.groupbsrr <- bsrr(x, y, s.min = 1, s.max = 8, group.index = group.index)
coef(lm.groupbsrr)
print(lm.groupbsrr)
summary(lm.groupbsrr)
pred.groupl0l2 <- predict(lm.groupbsrr, newx = x_new)
#-------------------include specified variables---------
Data <- gen.data(n, p, k, rho, family = "gaussian", beta = Tbeta, seed = seed)
lm.bsrr <- bsrr(Data$x, Data$y, always.include = 2)
n <- 200
p <- 20
k <- 5
rho <- 0.4
SNR <- 10
cortype <- 1
seed <- 10
Data <- gen.data(n, p, k, rho, family = "gaussian", cortype = cortype, snr = SNR, seed = seed)
x <- Data$x[1:140, ]
y <- Data$y[1:140]
x_new <- Data$x[141:200, ]
y_new <- Data$y[141:200]
lambda.list <- exp(seq(log(5), log(0.1), length.out = 10))
lm.bsrr <- bsrr(x, y, type = "bsrr", method = "pgsection")
# Generate simulated data
n = 200
p = 20
k = 5
rho = 0.4
seed = 10
Tbeta <- rep(0, p)
Tbeta[1:k*floor(p/k):floor(p/k)] <- rep(1, k)
Data = gen.data(n, p, k, rho, family = "gaussian", beta = Tbeta, seed=seed)
lambda.list = exp(seq(log(5), log(0.1), length.out = 10))
lm.bsrr = bsrr(Data$x, Data$y, lambda.list = lambda.list, method = "sequential")
print(lm.bsrr)
n <- 200
p <- 20
k <- 5
rho <- 0.4
seed <- 10
Tbeta <- rep(0, p)
Tbeta[1:k*floor(p/k):floor(p/k)] <- rep(1, k)
Data <- gen.data(n, p, k, rho, family = "gaussian", beta = Tbeta, seed = seed)
x <- Data$x[1:140, ]
y <- Data$y[1:140]
x_new <- Data$x[141:200, ]
y_new <- Data$y[141:200]
lambda.list <- exp(seq(log(5), log(0.1), length.out = 10))
lm.bsrr <- bess(x, y, method = "pgsection")
pred.bsrr <- predict(lm.bsrr, newx = x_new)
document()
document()
n <- 200
p <- 20
k <- 5
rho <- 0.4
seed <- 10
Tbeta <- rep(0, p)
Tbeta[1:k*floor(p/k):floor(p/k)] <- rep(1, k)
Data <- gen.data(n, p, k, rho, family = "gaussian", beta = Tbeta, seed = seed)
x <- Data$x[1:140, ]
y <- Data$y[1:140]
x_new <- Data$x[141:200, ]
y_new <- Data$y[141:200]
lambda.list <- exp(seq(log(5), log(0.1), length.out = 10))
lm.bsrr <- bsrr(x, y, method = "pgsection")
pred.bsrr <- predict(lm.bsrr, newx = x_new)
Data <- gen.data(n, p, k, rho, family = "binomial", beta = Tbeta, seed = seed)
x <- Data$x[1:140, ]
y <- Data$y[1:140]
x_new <- Data$x[141:200, ]
y_new <- Data$y[141:200]
lambda.list <- exp(seq(log(5), log(0.1), length.out = 10))
logi.bsrr <- bsrr(x, y, tune="cv",
family = "binomial", lambda.list = lambda.list, method = "sequential")
pred.bsrr <- predict(logi.bsrr, newx = x_new)
Data <- gen.data(n, p, k, rho, family = "cox", beta = Tbeta, scal = 10)
x <- Data$x[1:140, ]
y <- Data$y[1:140, ]
x_new <- Data$x[141:200, ]
y_new <- Data$y[141:200, ]
lambda.list <- exp(seq(log(5), log(0.1), length.out = 10))
cox.bsrr <- bsrr(x, y, family = "cox", lambda.list = lambda.list)
pred.bsrr <- predict(cox.bsrr, newx = x_new)
beta <- rep(c(rep(1,2),rep(0,3)), 4)
Data <- gen.data(200, 20, 5, rho=0.4, beta = beta, seed =10)
x <- Data$x
y <- Data$y
group.index <- c(rep(1, 2), rep(2, 3), rep(3, 2), rep(4, 3),
rep(5, 2), rep(6, 3), rep(7, 2), rep(8, 3))
lm.groupbsrr <- bsrr(x, y, s.min = 1, s.max = 8, group.index = group.index)
pred.groupbsrr <- predict(lm.groupbsrr, newx = x_new)
# Generate simulated data
n <- 200
p <- 20
k <- 5
rho <- 0.4
seed <- 10
Tbeta <- rep(0, p)
Tbeta[1:k*floor(p/k):floor(p/k)] <- rep(1, k)
Data <- gen.data(n, p, k, rho, family = "gaussian", beta = Tbeta, seed = seed)
lambda.list <- exp(seq(log(5), log(0.1), length.out = 10))
lm.bsrr <- bsrr(Data$x, Data$y, method = "pgsection")
coef(lm.bsrr)
n <- 200
p <- 20
k <- 5
rho <- 0.4
seed <- 10
Tbeta <- rep(0, p)
Tbeta[1:k*floor(p/k):floor(p/k)] <- rep(1, k)
Data <- gen.data(n, p, k, rho, family = "gaussian", beta = Tbeta, seed = seed)
lambda.list <- exp(seq(log(5), log(0.1), length.out = 10))
lm.bsrr <- bsrr(Data$x, Data$y, method = "pgsection")
summary(lm.bsrr)
beta <- rep(c(rep(1,2),rep(0,3)), 4)
Data <- gen.data(200, 20, 5, rho=0.4, beta = beta, snr = 100, seed =10)
group.index <- c(rep(1, 2), rep(2, 3), rep(3, 2), rep(4, 3),
rep(5, 2), rep(6, 3), rep(7, 2), rep(8, 3))
lm.groupbsrr <- bsrr(Data$x, Data$y, s.min = 1, s.max = 8, group.index = group.index)
summary(lm.groupbsrr)
check()
document()
check()
document()
check()
document()
check()
library(devtools)
document()
?matrix
?`matrix-class`
library(Matrix)
?Matrix
a=c(1,0,0,0,0,2)
b = Matrix(a, sparse = T)
class(b)
document()
?par
par(no.readonly = T)
?on.exit
library(bestridge)
document()
check()
release()
spell_check()
document()
library(bestridge)
data("duke")
document()
release()
release()
devtools::release()
devtools::release()
devtools::document()
devtools::document()
library(devtools)
check()
document()
document()
check()
y <- trim32[, 1]
x <- as.matrix(trim32[, -1])
lm.bsrr <- bsrr(x, y, lambda.min = 0.01, lambda.max = 100, nlambda = 100)
lm.bsrr <- bsrr(x, y)
library(bestridge)
check()
dat = data(dglars,package = 'dglars')
dat = data("dglars",package = 'dglars')
dat = data(duck,package = 'dglars')
dat = data(duke,package = 'dglars')
y <- duke[, 1]
x <- duke[, -1]
library(bestridge)
dim(x)
lm.bsrr <- bsrr(x, y)
library(bestridge)
lm.bsrr <- bsrr(x, y)
summary(lm.bsrr)
n=49
n/log(n)
lm.bsrr <- bsrr(x, y, s.max = 50)
summary(lm.bsrr)
logi.l0l2 <- bess(x, y, family = "binomial", type = "bsrr", method = "psequential",
screening.num = 100)
logi.l0l2 <- bsrr(x, y, family = "binomial", type = "bsrr", method = "psequential",
screening.num = 100)
logi.l0l2 <- bsrr(x, y, family = "binomial", method = "psequential",
screening.num = 100)
summary(lm.bsrr)
method = "psequenti
logi.l0l2 <- bsrr(x, y, family = "binomial",
# method = "psequential",
screening.num = 100)
summary(lm.bsrr)
logi.l0l2 <- bsrr(x, y, family = "binomial",
# method = "psequential",
s.max = 10,
screening.num = 100)
summary(lm.bsrr)
summary(logi.bsrr)
logi.bsrr <- bsrr(x, y, family = "binomial",
# method = "psequential",
# s.max = 10,
screening.num = 100)
summary(logi)
summary(logi.bsrr)
logi.bsrr <- bsrr(x, y, family = "binomial",
method = "psequential",
# s.max = 10,
screening.num = 100)
summary(logi.bsrr)
plot(logi.bsrr)
y.pred <- predict(logi.bsrr, type = "response")
head(y.pred)
?duke
dim(duke)
data(duke)
dim(duke)
remove(bestridge)
data(breast, package = 'dglars')
esr1 <- which(colnames(x) == 'X03635_at')
esr1
logi.nuisance <- bsrr(x, y, family = 'binomial',
method = 'psequential',
screening.num = 100,
always.include = ind)
logi.nuisance <- bsrr(x, y, family = 'binomial',
method = 'psequential',
screening.num = 100,
always.include = esr1)
summary(logi.nuisance)
logi.nuisance <- bsrr(x, y, family = 'binomial', method = 'psequential',
screening.num = 100, always.include = esr1)
install.packages('SNPassoc')
install.packages('SNPassoc')
load("C:/Users/test/OneDrive/coding/bestridge/SNPs.rda")
dat <- na.omit(SNPs)
y <- dat$blood.pre
x <- dat[, -c(1, 4)]
x[, -3] <- sapply(x[, -3], factor)
nl <- sapply(x, function(i) ifelse(nlevels(i) == 1 | length(unique(i)) ==
1, FALSE, TRUE))
x <- x[, -which(nl == FALSE)]
x <- model.matrix(~., as.data.frame(x))[, -1]
cols <- colSums(x)
dim(x)
head(x)
group.index <- c(1, 2, 3, 3, 4, 5, 6, 6, 7, 8, 8, 9, 10, 10, 11, 11, 12,
13, 14, 15, 15, 16, 16, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22,
23, 23, 24, 24)
length(group.index)
colnames(x)
x
cols
lm.group <- bsrr(x, y, group.index = group.index)
library(bestridge)
lm.group <- bsrr(x, y, group.index = group.index)
summary(lm.group)
dim(x)
library(bestridge)
?patient.data
library(bestridge)
library(spls)
?Lymophoma
?Lymphoma
data(patient.data)
data(patient.data)
library(bestridge)
data(patient.data)
data("lymphoma")
data("LymphomaData")
dim(patient.data)
length(patient.data$x)
length(patient.data$y)
length(patient.data$time)
dim(patient.data$x)
x=patient.data$x
time = patient.data$time
status =patient.data$status
x = t(x)
dim(x)
x = x[1:50, 1:100-]
x = x[1:50, 1:1000]
time = time[1:50]
status = status[1:50]
patient.data = list(x=x, time=time, status = status)
save(patient.data, file = 'LymphomaData.rda')
dim(x)
devtools::check()
data(patient.data)
x <- patient.data$x
y <- patient.data$time
status <- patient.data$status
cox.bsrr <- bsrr(x, cbind(y, status), family = "cox")
summary(cox.bsrr)
devtools::document()
devtools::document()
devtools::document()
source('C:/Users/test/OneDrive/coding/bestridge/bestridge/R/plot.bsrr.R', echo=TRUE)
devtools::document()
rm(list = c("plot.bsrr", "plot_coef_l0l2", "plot_heatmap", "plot_loss", "plot_solution"))
devtools::document()
devtools::document()
source('C:/Users/test/OneDrive/coding/bestridge/bestridge/R/coef.bsrr.R', echo=TRUE)
devtools::document()
rm(list = c("coef.bsrr"))
devtools::document()
devtools::document()
devtools::document()
devtools::document()
llibrary(devtools)
library(devtools)
spell_s
spell_check()
document()
release()
1
release()
devtools::release()
devtools::release()
devtools::release()
Sys.setenv(Lang='en')
devtools::release()
devtools::release()
devtools::release()
devtools::release()
devtools::release()
devtools::check_rhub()
library(devtools)
?check_rhub
platforms()
library(rhub)
?check
check()
release()
