lambda_max =100, lambda_min = 0.01, nlambda=100, is_screening = T, screening_size =30, powell_path = 2,
g_index = (1:ncol(x)-1))
Rcpp::sourceCpp('C:/Users/test/Desktop/src2/bess.cpp')
list_pdas <- bessCpp(as.matrix(x), y, data_type = 3, weight = rep(1,nrow(x)),is_normal =T,
algorithm_type = 5, model_type = 4,
max_iter = 20, exchange_num = 10, path_type = 2, is_warm_start = T,
ic_type = 3,is_cv =T, K = 5, state = 1,
sequence = 1:30, lambda_seq =exp(seq(log(100), log(0.01), length.out = 100)),
s_min = 1, s_max = 30, K_max = 10, epsilon = 10,
lambda_max =100, lambda_min = 0.01, nlambda=100, is_screening = T, screening_size =30, powell_path = 2,
g_index = (1:ncol(x)-1))
Rcpp::sourceCpp('C:/Users/test/Desktop/src2/bess.cpp')
list_pdas <- bessCpp(as.matrix(x), y, data_type = 3, weight = rep(1,nrow(x)),is_normal =T,
algorithm_type = 5, model_type = 4,
max_iter = 20, exchange_num = 10, path_type = 2, is_warm_start = T,
ic_type = 3,is_cv =T, K = 5, state = 1,
sequence = 1:30, lambda_seq =exp(seq(log(100), log(0.01), length.out = 100)),
s_min = 1, s_max = 30, K_max = 10, epsilon = 10,
lambda_max =100, lambda_min = 0.01, nlambda=100, is_screening = T, screening_size =30, powell_path = 2,
g_index = (1:ncol(x)-1))
x= chin$x #118 22215
y = chin$y
logi.l0l2 <- BeSS::bess(x, y, family = "binomial", type = "bsrr", method = "psequential",
s.max = 100, s.min = 1,
lambda.min = 0.01, lambda.max = 10, nlambda=100,
tune = "cv", screening.num = 100)
summary(logi.l0l2)
p
p
ggsave(p, file = "realdata_l0l2_pseq_screening1000_lam100_00001_pdasscreening3000_v2.pdf", height = 10, width = 9)
knitr::opts_chunk$set(echo = TRUE)
dat_9.18 = read.table("http://users.stat.ufl.edu/~rrandles/sta4210/Rclassnotes/data/textdatasets/KutnerData/Chapter%20%209%20Data%20Sets/CH09PR10.txt")
dat_9.18
colnames(dat_9.18) = c("Y", "X1", "X2", "X3", "X4")
# stepwise forward regression
model <- lm(Y ~ ., data = dat_9.18)
ols_step_forward_p(model)
# stepwise forward regression
library(leaps)
knitr::opts_chunk$set(echo = TRUE, message = F, warning=F)
# stepwise forward regression
library(leaps)
install.packages("olsrr")
# stepwise forward regression
library(olsrr)
ols_step_forward_p(model)
?step
sfStop()
step(lm.D9)
summary(lm1 <- lm(Fertility ~ ., data = swiss))
slm1 <- step(lm1)
summary(slm1)
slm1$anova
?ols_step_both_p
ols_step_forward_p(model, pent=0.05, prem=0.1)
k <- ols_step_forward_p(model, pent=0.05, prem=0.1)
k$model
?step_best_subset
?ols_step_best_subset
k2 = ols_step_best_subset(model)
k2
ols_step_best_subset(model)
lm_x3 = lm(Y~X3, dat=dat_9.18)
lm(Y~X3, dat=dat_9.18)
k$
rmse
lm(Y~X1+X3+X4, dat=dat_9.18)
ols_step_best_subset(model)
k$model
dat_9.22 = read.table("http://users.stat.ufl.edu/~rrandles/sta4210/Rclassnotes/data/textdatasets/KutnerData/Chapter%20%209%20Data%20Sets/CH09PR22.txt")
dat_9.22
colnames(dat_9.22) = c("Y", "X1", "X2", "X3", "X4")
cor(dat_9.22[,-1])
cor(dat_9.18[,-1])
dim(dat_9.18)
dim(dat_9.22)
cor(dat_9,18[,-1])
cor(dat_9.18[,-1])
head(dat_9.18)
head(dat_9.22)
model2 = lm(Y~X1+X3+X4, data=dat_9.22)
model2
k$predictors
k$indvar
k$model
k <- ols_step_forward_p(model, pent=0.05, prem=0.1, details = T)
str(k)
kmodel=k$model
str(kmodel)
kmodel$model
kmodel$terms
term=kmodel$terms
term[1]
term[,"response"]
term["response"]
class(term)
term[1]
term[[1]]
term[[2]]
term[[3]]
term[[4]]
term[5]
term[2]
term[1]
summary(mmodel)
summary(model2)
summary(model2)
k$model
model2$terms
anova(k$model)
anova1 = anova(k$model)
anova1$`Mean Sq`
sd1 = sqrt(solve(t(dat_9.18[,-1])%*%dat_9.18[,-1])*anova1$`Mean Sq`[length(anova1$`Mean Sq`)])
x1 = as.matrix(dat_9.18)
x1
x1 = as.matrix(dat_9.18[,-1])
sd1 = sqrt(solve(t(x1)%*%x1)*anova1$`Mean Sq`[length(anova1$`Mean Sq`)])
sd1
solve(t(x1)%*%x1)
anova1$`Mean Sq`[length(anova1$`Mean Sq`)]
inv(t(x1)%*%x1)
t(x1)%*%x1
diag(sqrt(solve(t(x1)%*%x1)*anova1$`Mean Sq`[length(anova1$`Mean Sq`)]))
sd1 = (sqrt(solve(t(x1)%*%x1)*anova1$`Mean Sq`[length(anova1$`Mean Sq`)]))[c(1, 6, 11, 16)]
sd1
x1 = as.matrix(dat_9.18[,-c(1,3)])
x1 = cbind(1, x1)
x1
(sqrt(solve(t(x1)%*%x1)*anova1$`Mean Sq`[length(anova1$`Mean Sq`)]))
sqrt(solve(t(x1)%*%x1)[c(1, 6, 11, 16)])
sqrt(solve(t(x1)%*%x1)[c(1, 6, 11, 16)])*anova1$`Mean Sq`[length(anova1$`Mean Sq`)])
sd1 = sqrt(solve(t(x1)%*%x1)[c(1, 6, 11, 16)])*anova1$`Mean Sq`[length(anova1$`Mean Sq`)]
sd1
solve(t(x1)%*%x1)
solve(t(x1)%*%x1)[c(1, 6, 11, 16)]
sd1 = sqrt(solve(t(x1)%*%x1)[c(1, 6, 11, 16)]*anova1$`Mean Sq`[length(anova1$`Mean Sq`)])
sd1
summay(model2)
summary(model2)
s=summary(model2)
s$coef
s$coef[,2]
vcov(model2)
?vcov
vcov(k$model)
sd1
sd1 = solve(t(x1)%*%x1)*anova1$`Mean Sq`[length(anova1$`Mean Sq`)]
sd1
vcov1 = vcov(k$model)
vcov2 = vcov(model2)
diag(vcov1)
coef1 = coef(k$model)
coef2 = coef(model2)
coef_compare = data.frame(coef_9.18 = coef1, sd = sqrt(diag(vcov1)), coef_9.22 = coef2, sd  = sqrt(diag(vcov2)))
coef_compare
model2 = lm(Y~X3+X1+X4, data=dat_9.22)
summary(model2)
vcov1 = vcov(k$model)
vcov2 = vcov(model2)
coef1 = coef(k$model)
coef2 = coef(model2)
coef_compare = data.frame(coef_9.18 = coef1, sd = sqrt(diag(vcov1)), coef_9.22 = coef2, sd  = sqrt(diag(vcov2)))
coef_compare
?t.test
?pwr.norm.test
library(pwr)
install.packages("pwr")
library(pwr)
?pwr
?pwr.t.test
library(pwr)
coef1
dm = coef1 - coef2
sdm = coef_compare$sd - coef_compare$sd.1
d = sd/sdm
sdm
class(sdm)
d = dm/sdm
d
pwr.t.test(d=d, sig.level = 0.05/4)
for(i in 1:4){
pwr.t.test(d=d[i], sig.level = 0.05/4)
}
for(i in 1:4){
pwr.t.test(n = nrow(dat_9.18), d=d[i], sig.level = 0.05/4)
}
for(i in 1:4){
pwr.t.test(n = nrow(dat_9.18), d=d[i], sig.level = 0.05/4)
}
i
pwr.t.test(n = nrow(dat_9.18), d=d[i], sig.level = 0.05/4)
for(i in 1:4){
pwr.t.test(n = nrow(dat_9.18), d=d[i], sig.level = 0.05/4)
}
for(i in 1:4){
res=pwr.t.test(n = nrow(dat_9.18), d=d[i], sig.level = 0.05/4)
res
}
res
print(res)
for(i in 1:4){
res=pwr.t.test(n = nrow(dat_9.18), d=d[i], sig.level = 0.05/4)
print(res)
}
cat(paste("检验第",i,"个系数， 结果如下："))
cat(res)
for(i in 1:4){
res=pwr.t.test(n = nrow(dat_9.18), d=d[i], sig.level = 0.05/4)
cat("-----------------------------------------")
cat(paste("检验第",i,"个系数， 结果如下："))
print(res)
cat("-----------------------------------------")
}
for(i in 1:4){
res=pwr.t.test(n = nrow(dat_9.18), d=d[i], sig.level = 0.05/4)
cat("-----------------------------------------\n")
cat(paste("检验第",i,"个系数， 结果如下："))
print(res)
cat("-----------------------------------------\n")
}
for(i in 1:4){
res=pwr.t.test(n = nrow(dat_9.18), d=d[i], sig.level = 0.05/4)
cat("-----------------------------------------\n")
if(i!=1) cat(paste("检验第",i-1,"个系数， 结果如下：")) else  cat(paste("检验截距是否相同， 结果如下："))
print(res)
cat("-----------------------------------------\n")
}
t.test
?t.test
dm = coef1 - coef2
sdm = (coef_compare$sd + coef_compare$sd.1)/2
d = dm/sdm
my.t.test = function(d, sig.level, n, p){
p = 2*pmin(pt(d, n-p), 1-pt(d, n-p))
if(p < sig.level){
return(1)
} else{
return(0)
}
}
for(i in 1:4){
res=my.t.test(d=d[i], sig.level = 0.05/4,n = nrow(dat_9.18),p=4)
cat("-----------------------------------------\n")
if(i!=1) cat(paste("检验第",i-1,"个系数， 结果如下：")) else  cat(paste("检验截距是否相同， 结果如下："))
print(res)
cat("-----------------------------------------\n")
}
my.t.test = function(d, sig.level, n, p){
p = 2*pmin(pt(d, n-p), 1-pt(d, n-p))
if(p < sig.level){
print(paste("p值：",p))
print("拒绝H0")
return(1)
} else{
print(paste("p值：",p))
print("不能拒绝H0")
return(0)
}
}
for(i in 1:4){
cat("-----------------------------------------\n")
if(i!=1) cat(paste("检验第",i-1,"个系数， 结果如下：")) else  cat(paste("检验截距是否相同， 结果如下："))
res=my.t.test(d=d[i], sig.level = 0.05/4,n = nrow(dat_9.18),p=4)
cat("-----------------------------------------\n")
}
my.t.test = function(d, sig.level, n, p){
p = 2*pmin(pt(d, n-p), 1-pt(d, n-p))
if(p < sig.level){
cat(paste("p值：",p, "\n"))
cat("拒绝H0\n")
return(1)
} else{
cat(paste("p值：",p,"\n"))
cat("不能拒绝H0\n")
return(0)
}
}
for(i in 1:4){
cat("-----------------------------------------\n")
if(i!=1) cat(paste("检验第",i-1,"个系数， 结果如下：\n")) else  cat(paste("检验截距是否相同， 结果如下：\n"))
res=my.t.test(d=d[i], sig.level = 0.05/4,n = nrow(dat_9.18),p=4)
cat("-----------------------------------------\n")
}
summary(mmodel)
summary(model2)
anova1 = anova(k$model)
anova2 = anova(model2)
anova(model2)
anova1$`Mean Sq`[length(anova1$`Mean Sq`)]
anova2$`Mean Sq`[length(anova2$`Mean Sq`)]
anova1$`Sum Sq`
sum(anova1$`Sum Sq`)
sum(anova1$`Sum Sq`)
R1 = 1-anova1$`Sum Sq`[length(anova1$`Sum Sq`)]/sum(anova1$`Sum Sq`)
R2 = 1-anova2$`Sum Sq`[length(anova2$`Sum Sq`)]/sum(anova2$`Sum Sq`)
R1
R2
anova1$`Mean Sq`[length(anova1$`Mean Sq`)]
anova2$`Mean Sq`[length(anova2$`Mean Sq`)]
anova1$`Mean Sq`[length(anova1$`Mean Sq`)]
anova2$`Mean Sq`[length(anova2$`Mean Sq`)]
class(k$model)
head(dat_9.22)
y_pred = predict(k$model, dat_9.22[, -c(1,3)])
msep = mean((dat_9.22$Y-y_pred)^2)
msep
msp
msep
k$model$residuals
anova1$`Mean Sq`[length(anova1$`Mean Sq`)]
mspr = mean((dat_9.22$Y-y_pred)^2)
mspr
anova1$`Mean Sq`[length(anova1$`Mean Sq`)]
anova1
mspr
dat_9.22$Y-y_pred
dat_9.22$Y-y_pred)^2
(dat_9.22$Y-y_pred)^2
mspr = mean((dat_9.22$Y-y_pred)^2)
anova1$`Mean Sq`[length(anova1$`Mean Sq`)]
mspr
install.packages(" qpcR")
install.packages("qpcR")
library( pcR)
library(qpcR)
PRESS(k$model)
PRESS(k$model)
class(k$model)
model1=l$mo
model1=k$model
PRESS(model1)
?PRESS
x <- 1:10
y <- rnorm(10, x, 0.1)
mod <- lm(y ~ x)
PRESS(mod)
?ols_step_best_subset
ols_best_subset(model)
ols_best_subset(model)
ols_step_best_subset(model)
model1 = lm(Y~X1+X3+X4, data = dat_9.18)
PRESS(model1)
471.452*25
anova(model1)
ma=anova(model1)
ma$`Mean Sq`
anova1$`Sum Sq`[length(anova1$`Sum Sq`)]
yy_pred
y_pred
predict(model1, dat_9.22[, -(1, 3)])
predict(model1, dat_9.22[, -c(1, 3)])
norm(dat_9.22$Y-y_pred, "2")^2/25
anova(model1)
anova1$`Mean Sq`[length(anova1$`Mean Sq`)]
dat_9.22
dat_9.18
anova1$`Mean Sq`[length(anova1$`Mean Sq`)]
mspr
plot(dat_9.18$Y, dat_9.22$Y)
y=sort(y)
y
Y1=sort(dat_9.18$Y)
Y2=sort(dat_9.22$Y)
plot(Y1, Y2)
dat_all = cbind(dat_9.18, dat_9.22)
dim(dat_all)
dat_all = rbind(dat_9.18, dat_9.22)
model3 = lm(Y~., data = dat_all)
ols_step_best_subset(model3)
?`olsrr-package`
res=ols_step_best_subset(model3)
anova(res)
ols_step_best_subset(model3, detail=T)
anova(model3)
rvoc(model3)
vcor(model3)
vcov(model3)
diag(vcov(model3))
sqrt(diag(vcov(model3)))
model3 = lm(Y~X3+X1+X4, data = dat_all)
model4 = lm(Y~X1+X3, data = dat_9.18)
model4$residuals
y_pred = predict(model4)
plot(y_pred, model4$residuals)
plot(dat_9.18$X1, model4$residuals)
plot(dat_9.18$X3, model4$residuals)
plot(dat_9.18$X1*dat_9.18$X3, residuals())
plot(dat_9.18$X1*dat_9.18$X3, model4$residuals)
y_pred = predict(model4)
plot(y_pred, model4$residuals)
y_pred = predict(model4)
plot(y_pred, model4$residuals)
plot(dat_9.18$X1, model4$residuals)
plot(dat_9.18$X3, model4$residuals)
x1_x3 = lm(X1~X3, data = dat_9.18)
y_x3 = lm(Y~X3, data=dat_9.18)
plot(y_x3, x1_x3)
x1_x3 = lm(X1~X3, data = dat_9.18)
y_x3 = lm(Y~X3, data=dat_9.18)
plot(y_x3, x1_x3)
plot(y_x3$residuals, x1_x3$residuals)
plot(x1_x3$residuals,y_x3$residuals)
x3_x1 = lm(X3~X1, data = dat_9.18)
y_x1 = lm(Y~X1, data=dat_9.18)
plot(x3_x1$residuals, y_x1$residuals)
qqnorm(model3$residuals)
qqnorm(model4$residuals)
?qqnorm
qqline(model4$residuals)
qqnorm(model4$residuals)
qqline(model4$residuals)
StdErr = summary(model3)$sigam
StdErr = summary(model3)$sigma
n = nrow(dat_9.18)
ExpVals = sapply(1:n, function(k) StdErr * qnorm(k-0.375)/(n+0.25))
cor(ExpVals, sort(model$residuals))
ExpVals
StdErr = summary(model3)$sigma
n = nrow(dat_9.18)
ExpVals = sapply(1:n, function(k) StdErr * qnorm(k-0.375)/(n+0.25))
cor(ExpVals, sort(model$residuals))
n
StdErr
anova(model3)
StdErr = summary(model4)$sigma
n = nrow(dat_9.18)
ExpVals = sapply(1:n, function(k) StdErr * qnorm(k-0.375)/(n+0.25))
cor(ExpVals, sort(model4$residuals))
StdErr
anova(model4)
sqrt(27.6)
summary(model4)
ExpVals
k=2
qnorm(k-0.375)/(n+0.25)
k
ExpVals = sapply(1:n, function(k) StdErr * qnorm((k-0.375)/(n+0.25)))
cor(ExpVals, sort(model4$residuals))
s4=summary(model4)
str(s4)
s4[[1]]
s4[1]
a4 = anova(model4)
mse = a4$`Mean Sq`[length(a4$`Mean Sq`)]
order_e = order(model4$residuals)
order_e
head(dat_9.18)
x_oder = dat_9.18[x_order, -c(1, 3, 5)]
x_oder = dat_9.18[order_e, -c(1, 3, 5)]
e = model4$residuals[order_e]
n = nrow(dat_9.18)
dom = var(x_order)*(n-1)
x_order = dat_9.18[order_e, -c(1, 3, 5)]
dom = var(x_order)*(n-1)
x_order
cor(ExpVals, sort(model4$residuals))
?rstudent
rsd.lm = rstudent(model4)
rsd.lm
ifelse(rsd.lm > qt(1-0.95/2/n,n-3-1), "outlier", "Non-outlier")
qt(1-0.95/2/n,n-3-1)
rsd.lm
ifelse(abs(rsd.lm) > qt(1-0.95/2/n,n-3-1), "outlier", "Non-outlier")
qt(1-0.95/2/n,n-3-1)
X = dat_9.18[, -c(1, 3, 5)]
hat_matrix = X%*%solve(t(X)%*%X)%*%t(X)
X = as.matrix(dat_9.18[, -c(1, 3, 5)])
hat_matrix = X%*%solve(t(X)%*%X)%*%t(X)
hat_matrix
p=3
X = as.matrix(dat_9.18[, -c(1, 3, 5)])
hat_matrix = X%*%solve(t(X)%*%X)%*%t(X)
ifelse(diag(hat_matrix) > 2*p/n, "outlier", "Non-outlier")
diag(hat_matrix)
2*p/n
6/25
X
head(dat_9.18)
stem(dat_9.18$X1)
stem(dat_9.18$X3)
cat("----------X1----------\n")
stem(dat_9.18$X1)
cat("----------X3----------\n")
stem(dat_9.18$X3)
X
X
diag(hat_matrix)
stem(dat_9.18$X1)
stem(X[,1])
X[,1]
X
dat_9.18
?stem
X
cat("----------X1----------\n")
stem(dat_9.18$X1)
cat("----------X3----------\n")
stem(dat_9.18$X3)
xx=c(1:10,100)
stem(xx)
stem(xx*10)
dat_9.18$X3[which(dat_9.18$X3==150)]
X
dat_9.18$X1[which(dat_9.18$X1==150)]
which(dat_9.18$X1==140)
stem(X[,1])
stem(X[,2])
which(dat_9.18$X1==120)
which(dat_9.18$X1==140)
which(dat_9.18$X1==150)
X[18,]
Rcpp::sourceCpp('C:/Users/test/OneDrive/coding/frame/bess-0.0.12-20201201/bess.cpp')
