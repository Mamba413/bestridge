x1 <- (log(y) - B0 - B2 * x2) / B1
x = cbind(x1, x2)
list_pdas <- bessCpp(as.matrix(x), y, data_type = 2, weight = rep(1,nrow(x)),is_normal =T,
algorithm_type = 1, model_type = 3,
max_iter = 20, exchange_num = 10, path_type =2, is_warm_start = T,
ic_type = 3,is_cv =F, K = 5, state = 1,
sequence = 1:min(ncol(x), round(nrow(x)/log(nrow(x)))), lambda_seq =0,
s_min = 1, s_max =min(ncol(x), round(nrow(x)/log(nrow(x)))), K_max = 10, epsilon = 10,
lambda_max =0, lambda_min =0, nlambda=1, is_screening = F, screening_size =5, powell_path = 2,
g_index = (1:ncol(x)-1), always_select = numeric(0), tao = 1.1)
Rcpp::sourceCpp('C:/Users/test/OneDrive/coding/frame/bess-0.0.12-20201210/bess.cpp')
list_pdas <- bessCpp(as.matrix(x), y, data_type = 2, weight = rep(1,nrow(x)),is_normal =T,
algorithm_type = 1, model_type = 3,
max_iter = 20, exchange_num = 10, path_type =2, is_warm_start = T,
ic_type = 3,is_cv =F, K = 5, state = 1,
sequence = 1:min(ncol(x), round(nrow(x)/log(nrow(x)))), lambda_seq =0,
s_min = 1, s_max =min(ncol(x), round(nrow(x)/log(nrow(x)))), K_max = 10, epsilon = 10,
lambda_max =0, lambda_min =0, nlambda=1, is_screening = F, screening_size =5, powell_path = 2,
g_index = (1:ncol(x)-1), always_select = numeric(0), tao = 1.1)
list_pdas$beta
list_pdas <- bessCpp(as.matrix(x), y, data_type = 2, weight = rep(1,nrow(x)),is_normal =T,
algorithm_type = 1, model_type = 3,
max_iter = 20, exchange_num = 10, path_type =2, is_warm_start = T,
ic_type = 3,is_cv =F, K = 5, state = 1,
sequence = 1:min(ncol(x), round(nrow(x)/log(nrow(x)))), lambda_seq =0,
s_min = 1, s_max =min(ncol(x), round(nrow(x)/log(nrow(x)))), K_max = 10, epsilon = 10,
lambda_max =0, lambda_min =0, nlambda=1, is_screening = F, screening_size =5, powell_path = 2,
g_index = (1:ncol(x)-1), always_select = 1, tao = 1.1)
list_pdas$beta
list_pdas <- bessCpp(as.matrix(x), y, data_type = 2, weight = rep(1,nrow(x)),is_normal =T,
algorithm_type = 1, model_type = 3,
max_iter = 20, exchange_num = 10, path_type =2, is_warm_start = T,
ic_type = 3,is_cv =F, K = 5, state = 1,
sequence = 1:min(ncol(x), round(nrow(x)/log(nrow(x)))), lambda_seq =0,
s_min = 1, s_max =min(ncol(x), round(nrow(x)/log(nrow(x)))), K_max = 10, epsilon = 10,
lambda_max =0, lambda_min =0, nlambda=1, is_screening = F, screening_size =5, powell_path = 2,
g_index = (1:ncol(x)-1), always_select = 2, tao = 1.1)
list_pdas$beta
list_pdas <- bessCpp(as.matrix(x), y, data_type = 1, weight = rep(1,nrow(x)),is_normal =T,
algorithm_type = 1, model_type = 3,
max_iter = 20, exchange_num = 10, path_type =2, is_warm_start = T,
ic_type = 3,is_cv =F, K = 5, state = 1,
sequence = 1:min(ncol(x), round(nrow(x)/log(nrow(x)))), lambda_seq =0,
s_min = 1, s_max =min(ncol(x), round(nrow(x)/log(nrow(x)))), K_max = 10, epsilon = 10,
lambda_max =0, lambda_min =0, nlambda=1, is_screening = F, screening_size =5, powell_path = 2,
g_index = (1:ncol(x)-1), always_select = 1, tao = 1.1)
list_pdas$beta
n = 100
p = 10
k = 2
rho = 0.8
SNR = 100
cortype = 1
seed = 100
one=rep(1,n)
zero=rep(0,n)
X=rnorm(n*p)
X=matrix(X,n,p)
X = scale(X, TRUE, FALSE)
normX = sqrt(drop(one %*% (X^2)))
X = sqrt(n)*scale(X, FALSE, normX)
gc()
x=X+rho*(cbind(zero,X[,1:(p-2)],zero)+cbind(zero,X[,3:p],zero))
colnames(x)=paste0('X',1:ncol(x))
sigma=1
nonzero=sample(1:p,k)
Tbeta=rep(0,p)
x =x/16
m=5*sigma*sqrt(2*log(p)/n)
if(is.null(beta)) Tbeta[nonzero]=runif(k,2*m,10*m) else Tbeta=beta
eta <- x%*%Tbeta#+rnorm(n,0,sigma)
eta <- ifelse(eta>30, 30, eta)
eta <- ifelse(eta< -30, -30, eta)
Tbeta[nonzero]=runif(k,2*m,10*m)
nonzero=sample(1:p,k)
Tbeta=rep(0,p)
x =x/16
m=5*sigma*sqrt(2*log(p)/n)
Tbeta[nonzero]=runif(k,2*m,10*m)
eta <- x%*%Tbeta#+rnorm(n,0,sigma)
eta <- ifelse(eta>30, 30, eta)
eta <- ifelse(eta< -30, -30, eta)
eta <- exp(eta)
eta <- x%*%Tbeta#+rnorm(n,0,sigma)
ifelse(eta< -30, -30, eta)
source('C:/Users/test/OneDrive/coding/BeSS/BeSS/R/gen.data.R', echo=TRUE)
n = 100
p = 10
k = 2
rho = 0.8
SNR = 100
cortype = 1
seed = 100
Data = gen.data(n, p, k, rho=0.5, family = "poisson", cortype=3, snr=SNR, seed=seed, scal=10)
#Data = Rbess::gen.data(n, p, k, rho, family = "binomial", cortype=cortype, SNR=SNR, seed=seed)
#Data = BeSS::gen.data(n, p, k, family = "gaussian")
x = Data$x
y = Data$y
res = bess(x, y, family = "poi",s.list = 1:10, method = "seq", type = "bss")
res$beta[which(res$beta!=0)]
y
source('C:/Users/test/OneDrive/coding/BeSS/BeSS/R/gen.data.R', echo=TRUE)
list_pdas <- bessCpp(as.matrix(x), y, data_type = 2, weight = rep(1,nrow(x)),is_normal =T,
algorithm_type = 1, model_type = 3,
max_iter = 20, exchange_num = 10, path_type =2, is_warm_start = T,
ic_type = 3,is_cv =F, K = 5, state = 1,
sequence = 1:min(ncol(x), round(nrow(x)/log(nrow(x)))), lambda_seq =0,
s_min = 1, s_max =min(ncol(x), round(nrow(x)/log(nrow(x)))), K_max = 10, epsilon = 10,
lambda_max =0, lambda_min =0, nlambda=1, is_screening = F, screening_size =5, powell_path = 2,
g_index = (1:ncol(x)-1), always_select = 1, tao = 1.1)
list_pdas$beta
res = bess(x, y, family = "poi",s.list = 1:10, method = "seq", type = "bss", normalize = 1)
normalize = 1
normalize !=0
normalize <- as.character(normalize)
normalize
normalize
normalize <- switch (normalize,
'1' <- 2,
'2' <- 3,
'3' <- 1
)
normalize <- switch (normalize,
'1' <- 2,
'2' <- 3,
'3' <- 1
)
#-------------------logistic model----------------------#
#Generate simulated data
Data <- gen.data(n, p, k, rho, family = "binomial", cortype = cortype, snr = SNR,  beta = Tbeta, seed = seed)
#-------------------logistic model----------------------#
#Generate simulated data
Data <- gen.data(n, p, k, rho, family = "binomial", snr = SNR,  beta = Tbeta, seed = seed)
library(BeSS)
#-------------------logistic model----------------------#
#Generate simulated data
Data <- gen.data(n, p, k, rho, family = "binomial", snr = SNR,  beta = Tbeta, seed = seed)
#-------------------linear model----------------------#
# Generate simulated data
n <- 200
p <- 20
k <- 5
rho <- 0.4
SNR <- 10
cortype <- 1
seed <- 10
Tbeta <- rep(0, p)
Tbeta[1:k*floor(p/k):floor(p/k)] <- rep(1, k)
#-------------------poisson model----------------------#
Data <- gen.data(n, p, k, rho, family = "poisson", beta = Tbeta, seed = seed)
x <- Data$x[1:140, ]
y <- Data$y[1:140]
x_new <- Data$x[141:200, ]
y_new <- Data$y[141:200]
poi.bss <- bess(x, y, family = "binomial", method = "sequential")
poi.bss <- bess(x, y, family = "poisson", method = "sequential")
lambda.list <- exp(seq(log(5), log(0.1), length.out = 10))
poi.bsrr <- bess(x, y, type = "bsrr",
family = "poisson", lambda.list = lambda.list)
coef(logi.bss)
coef(poi.bss)
poi.bss <- bess(x, y, family = "poisson", method = "sequential", normalize = 2)
coef(poi.bss)
#-------------------poisson model----------------------#
Data <- gen.data(n, p, k, rho, family = "poisson", beta = Tbeta, seed = seed, cortype = 3)
x <- Data$x[1:140, ]
y <- Data$y[1:140]
x_new <- Data$x[141:200, ]
y_new <- Data$y[141:200]
poi.bss <- bess(x, y, family = "poisson", method = "sequential", normalize = 2)
coef(poi.bss)
#-------------------poisson model----------------------#
Data <- gen.data(n, p, k, rho=0.3, family = "poisson", beta = Tbeta, seed = seed, cortype = 2)
x <- Data$x[1:140, ]
y <- Data$y[1:140]
x_new <- Data$x[141:200, ]
y_new <- Data$y[141:200]
poi.bss <- bess(x, y, family = "poisson", method = "sequential", normalize = 2)
coef(poi.bss)
set.seed(1234)
B0 <-  1.2                # intercept
B1 <-  1.5                # slope for x1
B2 <- -0.5                # slope for x2
y <- rpois(100, 6.5)
x2 <- seq(-0.5, 0.5,,length(y))
x1 <- (log(y) - B0 - B2 * x2) / B1
x = cbind(x1, x2)
list_pdas <- bessCpp(as.matrix(x), y, data_type = 2, weight = rep(1,nrow(x)),is_normal =T,
algorithm_type = 1, model_type = 3,
max_iter = 20, exchange_num = 10, path_type =2, is_warm_start = T,
ic_type = 3,is_cv =F, K = 5, state = 1,
sequence = 1:min(ncol(x), round(nrow(x)/log(nrow(x)))), lambda_seq =0,
s_min = 1, s_max =min(ncol(x), round(nrow(x)/log(nrow(x)))), K_max = 10, epsilon = 10,
lambda_max =0, lambda_min =0, nlambda=1, is_screening = F, screening_size =5, powell_path = 2,
g_index = (1:ncol(x)-1), always_select = 1, tao = 1.1)
res = bess(x, y, family = "poi", method = "seq", type = "bss", normalize = 1)
res$beta[which(res$beta!=0)]
Data = gen.data(n, p, k, rho=0.5, family = "poisson", cortype=1, snr=SNR, seed=seed, scal=10)
#Data = Rbess::gen.data(n, p, k, rho, family = "binomial", cortype=cortype, SNR=SNR, seed=seed)
#Data = BeSS::gen.data(n, p, k, family = "gaussian")
x = Data$x
y = Data$y
res = bess(x, y, family = "poi", method = "seq", type = "bss", normalize = 1)
res$beta[which(res$beta!=0)]
source('C:/Users/test/OneDrive/coding/BeSS/BeSS/R/gen.data.R', echo=TRUE)
library(MASS)
#-------------------poisson model----------------------#
Data <- gen.data(n, p, k, rho=0.3, family = "poisson", beta = Tbeta, seed = seed, cortype = 2)
x <- Data$x[1:140, ]
y <- Data$y[1:140]
x_new <- Data$x[141:200, ]
y_new <- Data$y[141:200]
poi.bss <- bess(x, y, family = "poisson", method = "sequential", normalize = 2)
coef(poi.bss)
#-------------------poisson model----------------------#
Data <- gen.data(n, p, k, rho=0.3, family = "poisson", beta = Tbeta, seed = seed, cortype = 1)
#-------------------poisson model----------------------#
Data <- gen.data(n, p, k, rho=0.3, family = "poisson", beta = Tbeta, seed = seed, cortype = 1)
x <- Data$x[1:140, ]
y <- Data$y[1:140]
x_new <- Data$x[141:200, ]
y_new <- Data$y[141:200]
poi.bss <- bess(x, y, family = "poisson", method = "sequential", normalize = 2)
coef(poi.bss)
#-------------------poisson model----------------------#
Data <- gen.data(n, p, k, rho=0.3, family = "poisson", beta = Tbeta, seed = seed)
x <- Data$x[1:140, ]
y <- Data$y[1:140]
x_new <- Data$x[141:200, ]
y_new <- Data$y[141:200]
poi.bss <- bess(x, y, family = "poisson", method = "sequential", normalize = 2)
lambda.list <- exp(seq(log(5), log(0.1), length.out = 10))
poi.bsrr <- bess(x, y, type = "bsrr",
family = "poisson", lambda.list = lambda.list)
coef(poi.bss)
coef(logi.bsrr)
coef(poi.bss)
coef(poi.bsrr)
print(poi.bss)
print(poi.bsrr)
summary(poi.bss)
summary(poi.bsrr)
pred.bss <- predict(poi.bss, newx = x_new)
pred.bsrr <- predict(poi.bsrr, newx = x_new)
# generate plots
plot(poi.bss, type = "both", breaks = TRUE)
plot(poi.bsrr)
poi.bss <- bess.one(x, y, family = "poisson", method = "sequential", normalize = 2, s=5)
poi.bss <- bess.one(x, y, family = "poisson", normalize = 2, s=5)
lambda.list <- exp(seq(log(5), log(0.1), length.out = 10))
poi.bsrr <- bess.one(x, y, type = "bsrr", family = "poisson", s = 5, lambda = 0.01)
coef(poi.bss)
coef(poi.bsrr)
print(poi.bss)
print(poi.bsrr)
summary(poi.bss)
summary(poi.bsrr)
pred.bss <- predict(poi.bss, newx = x_new)
pred.bsrr <- predict(poi.bsrr, newx = x_new)
library(BeSS)
############## transbig  ##########
data("transbig", package = "breastCancerTRANSBIG")
x_all = t(exprs(transbig))
pd  = pData(transbig)
time = pd$t.dmfs
status = pd$e.dmfs
y_all = cbind(time, status)
x_all = t(exprs(transbig))
pd  = pData(transbig)
i=1
ns = 30
nlambda=100
npara = ns*nlambda
set.seed(i)
x_all = as.matrix(x_all)
train_label = sample(1:nrow(x_all), round(nrow(x_all)*2/3))
x = x_all[train_label, ]
y = y_all[train_label, ]
x_test = x_all[-c(train_label), ]
y_test = y_all[-c(train_label), ]
cox.powell.gsection = BeSS::bess(x, y, type = 'bsrr', method = "pgsection",
s.max=ns, family = "cox",
lambda.max = 100, lambda.min=0.01, nlambda = nlambda, tune = "cv", screening.num = ns)
norm.powell = max(abs(cox.powell.gsection$beta))
pred.powell= x_test %*% cox.powell.gsection$beta
C_index1.powell =  Cindex(pred.powell, Surv(y_test[,1], y_test[,2]))
C_index1.powell = ifelse(C_index1.powell <0.5, 1-C_index1.powell, C_index1.powell)
C_index2.powell =  ifelse(rcorr.cens(pred.powell, Surv(y_test[, 1], y_test[, 2]))[[1]] < 0.5, 1-rcorr.cens(pred.powell, Surv(y_test[, 1], y_test[, 2]))[[1]], rcorr.cens(pred.powell, Surv(y_test[, 1], y_test[, 2]))[[1]]) # rcorr.cens(pred.powell, Surv(y_test[, 1], y_test[, 2]))[[1]]
library(ncvreg)
library(survivalROC)
library(survAUC)
library(risksetROC)
library(survival)
library(ensr)
library(Hmisc)
library(HCmodelSets)
C_index1.powell =  Cindex(pred.powell, Surv(y_test[,1], y_test[,2]))
C_index1.powell = ifelse(C_index1.powell <0.5, 1-C_index1.powell, C_index1.powell)
C_index2.powell =  ifelse(rcorr.cens(pred.powell, Surv(y_test[, 1], y_test[, 2]))[[1]] < 0.5, 1-rcorr.cens(pred.powell, Surv(y_test[, 1], y_test[, 2]))[[1]], rcorr.cens(pred.powell, Surv(y_test[, 1], y_test[, 2]))[[1]]) # rcorr.cens(pred.powell, Surv(y_test[, 1], y_test[, 2]))[[1]]
iauc.powell = iAUC(x, y, x_test,Surv(y_test[,1], y_test[,2]), cox.powell.gsection$beta, median(y_test[, 1]))
AUC.powell <- survivalROC(Stime = y_test[, 1],
status = y_test[, 2],
marker = pred.powell,
predict.time = median(y_test[, 1]),
span = 0.25*length((y_test[, 1]))^(-0.20), method = "NNE")$AUC
pred.powell= predict(cox.powell.gsection, x_test) #x_test %*% cox.powell.gsection$beta
C_index1.powell =  Cindex(pred.powell, Surv(y_test[,1], y_test[,2]))
C_index1.powell = ifelse(C_index1.powell <0.5, 1-C_index1.powell, C_index1.powell)
C_index2.powell =  ifelse(rcorr.cens(pred.powell, Surv(y_test[, 1], y_test[, 2]))[[1]] < 0.5, 1-rcorr.cens(pred.powell, Surv(y_test[, 1], y_test[, 2]))[[1]], rcorr.cens(pred.powell, Surv(y_test[, 1], y_test[, 2]))[[1]]) # rcorr.cens(pred.powell, Surv(y_test[, 1], y_test[, 2]))[[1]]
iauc.powell = iAUC(x, y, x_test,Surv(y_test[,1], y_test[,2]), cox.powell.gsection$beta, median(y_test[, 1]))
AUC.powell <- survivalROC(Stime = y_test[, 1],
status = y_test[, 2],
marker = pred.powell,
predict.time = median(y_test[, 1]),
span = 0.25*length((y_test[, 1]))^(-0.20), method = "NNE")$AUC
if(AUC.powell<0.5) AUC.powell = 1-AUC.powell
source('C:/Users/test/OneDrive/coding/Rbess/simu/cox/realdata/cox/source_realdata_cox.R', echo=TRUE)
iauc.powell = iAUC(x, y, x_test,Surv(y_test[,1], y_test[,2]), cox.powell.gsection$beta, median(y_test[, 1]))
AUC.powell <- survivalROC(Stime = y_test[, 1],
status = y_test[, 2],
marker = pred.powell,
predict.time = median(y_test[, 1]),
span = 0.25*length((y_test[, 1]))^(-0.20), method = "NNE")$AUC
if(AUC.powell<0.5) AUC.powell = 1-AUC.powell
k.powell = sum(ifelse(abs(cox.powell.gsection$beta) > 1e-6, 1, 0))
res.powell.gsection = c(norm = norm.powell, C_index1 =  C_index1.powell,C_index2 =  C_index2.powell, iauc = iauc.powell, IAUC = AUC.powell, k = k.powell)
res.powell.gsection
cox.powell.seq = BeSS::bess(x, y, type = 'bsrr', method = "psequential",
family = "cox", s.min=1, s.max=30,
lambda.max = 100, lambda.min=0.01, tune = "cv", nlambda = 100,
screening.num = 30)
library(BeSS)
cox.powell.gsection = BeSS::bess(x, y, type = 'bsrr', method = "pgsection",
s.max=ns, family = "cox",
lambda.max = 100, lambda.min=0.01, nlambda = nlambda, tune = "cv", screening.num = ns)
i=2
set.seed(i)
x_all = as.matrix(x_all)
train_label = sample(1:nrow(x_all), round(nrow(x_all)*2/3))
x = x_all[train_label, ]
y = y_all[train_label, ]
x_test = x_all[-c(train_label), ]
y_test = y_all[-c(train_label), ]
cox.powell.seq = BeSS::bess(x, y, type = 'bsrr', method = "psequential",
family = "cox", s.min=1, s.max=30,
lambda.max = 100, lambda.min=0.01, tune = "cv", nlambda = 100,
screening.num = 30)
norm.powell = max(abs(cox.powell.seq$beta))
pred.powell= x_test %*% cox.powell.seq$beta
C_index1.powell =  Cindex(pred.powell, Surv(y_test[,1], y_test[,2]))
C_index1.powell = ifelse(C_index1.powell <0.5, 1-C_index1.powell, C_index1.powell)
C_index2.powell = 0 # ifelse(rcorr.cens(pred.powell, Surv(y_test[, 1], y_test[, 2]))[[1]] < 0.5, 1-rcorr.cens(pred.powell, Surv(y_test[, 1], y_test[, 2]))[[1]], rcorr.cens(pred.powell, Surv(y_test[, 1], y_test[, 2]))[[1]]) # rcorr.cens(pred.powell, Surv(y_test[, 1], y_test[, 2]))[[1]]
iauc.powell = rep(0,3)#iAUC(x, y, x_test,Surv(y_test[,1], y_test[,2]), cox.powell.seq$beta, median(y_test[, 1]))
AUC.powell <- survivalROC(Stime = y_test[, 1],
status = y_test[, 2],
marker = pred.powell,
predict.time = median(y_test[, 1]),
span = 0.25*length((y_test[, 1]))^(-0.20), method = "NNE")$AUC
if(AUC.powell<0.5) AUC.powell = 1-AUC.powell
k.powell = sum(ifelse(abs(cox.powell.seq$beta) > 1e-6, 1, 0))
res.powell.seq = c(norm = norm.powell,  C_index1 =  C_index1.powell,C_index2 =  C_index2.powell, iauc=iauc.powell, IAUC=AUC.powell, k = k.powell)
res.powell.seq
cox.l0l2 = bess(x, y, type = 'bsrr', method = "sequential",
s.list = 1:ns, family = "cox",
lambda.list = exp(seq(log(50),log(0.0001),length.out = nlambda)), tune = "cv", screening.num = ns)
norm.l0l2 = max(abs(cox.l0l2$beta))
pred.l0l2= x_test %*% cox.l0l2$beta # predict(cox.l0l2, newx = x_test)
C_index1.l0l2 =  Cindex(pred.l0l2, Surv(y_test[,1], y_test[,2]))
C_index1.l0l2 = ifelse(C_index1.l0l2 <0.5, 1-C_index1.l0l2, C_index1.l0l2)
C_index2.l0l2 =  ifelse(rcorr.cens(pred.l0l2, Surv(y_test[, 1], y_test[, 2]))[[1]] < 0.5, 1-rcorr.cens(pred.l0l2, Surv(y_test[, 1], y_test[, 2]))[[1]], rcorr.cens(pred.l0l2, Surv(y_test[, 1], y_test[, 2]))[[1]]) # rcorr.cens(pred.l0l2, Surv(y_test[, 1], y_test[, 2]))[[1]]
iauc.l0l2 = rep(0,3)# iAUC(x, y, x_test,Surv(y_test[,1], y_test[,2]), cox.l0l2$beta, median(y_test[, 1]))
AUC.l0l2 <- survivalROC(Stime = y_test[, 1],
status = y_test[, 2],
marker = pred.l0l2,
predict.time = median(y_test[, 1]),
span = 0.25*length((y_test[, 1]))^(-0.20), method = "NNE")$AUC
if(AUC.l0l2<0.5) AUC.l0l2 = 1-AUC.l0l2
k.l0l2 = sum(ifelse(abs(cox.l0l2$beta) > 1e-6, 1, 0))
res.l0l2 = c(norm = norm.l0l2,  C_index1 =  C_index1.l0l2,C_index2 =  C_index2.l0l2, iauc=iauc.l0l2, IAUC=AUC.l0l2, k = k.l0l2)
norm.l0l2 = max(abs(cox.l0l2$beta))
pred.l0l2= x_test %*% cox.l0l2$beta # predict(cox.l0l2, newx = x_test)
C_index1.l0l2 =  Cindex(pred.l0l2, Surv(y_test[,1], y_test[,2]))
C_index1.l0l2 = ifelse(C_index1.l0l2 <0.5, 1-C_index1.l0l2, C_index1.l0l2)
C_index2.l0l2 =  ifelse(rcorr.cens(pred.l0l2, Surv(y_test[, 1], y_test[, 2]))[[1]] < 0.5, 1-rcorr.cens(pred.l0l2, Surv(y_test[, 1], y_test[, 2]))[[1]], rcorr.cens(pred.l0l2, Surv(y_test[, 1], y_test[, 2]))[[1]]) # rcorr.cens(pred.l0l2, Surv(y_test[, 1], y_test[, 2]))[[1]]
iauc.l0l2 = rep(0,3)# iAUC(x, y, x_test,Surv(y_test[,1], y_test[,2]), cox.l0l2$beta, median(y_test[, 1]))
AUC.l0l2 <- survivalROC(Stime = y_test[, 1],
status = y_test[, 2],
marker = pred.l0l2,
predict.time = median(y_test[, 1]),
span = 0.25*length((y_test[, 1]))^(-0.20), method = "NNE")$AUC
if(AUC.l0l2<0.5) AUC.l0l2 = 1-AUC.l0l2
k.l0l2 = sum(ifelse(abs(cox.l0l2$beta) > 1e-6, 1, 0))
res.l0l2 = c(norm = norm.l0l2,  C_index1 =  C_index1.l0l2,C_index2 =  C_index2.l0l2, iauc=iauc.l0l2, IAUC=AUC.l0l2, k = k.l0l2)
C_index1.l0l2
iauc.l0l2
C_index2.l0l2
C_index2.l0l2 =  0#ifelse(rcorr.cens(pred.l0l2, Surv(y_test[, 1], y_test[, 2]))[[1]] < 0.5, 1-rcorr.cens(pred.l0l2, Surv(y_test[, 1], y_test[, 2]))[[1]], rcorr.cens(pred.l0l2, Surv(y_test[, 1], y_test[, 2]))[[1]]) # rcorr.cens(pred.l0l2, Surv(y_test[, 1], y_test[, 2]))[[1]]
iauc.l0l2 = rep(0,3)# iAUC(x, y, x_test,Surv(y_test[,1], y_test[,2]), cox.l0l2$beta, median(y_test[, 1]))
AUC.l0l2 <- survivalROC(Stime = y_test[, 1],
status = y_test[, 2],
marker = pred.l0l2,
predict.time = median(y_test[, 1]),
span = 0.25*length((y_test[, 1]))^(-0.20), method = "NNE")$AUC
if(AUC.l0l2<0.5) AUC.l0l2 = 1-AUC.l0l2
k.l0l2 = sum(ifelse(abs(cox.l0l2$beta) > 1e-6, 1, 0))
res.l0l2 = c(norm = norm.l0l2,  C_index1 =  C_index1.l0l2,C_index2 =  C_index2.l0l2, iauc=iauc.l0l2, IAUC=AUC.l0l2, k = k.l0l2)
res.l0l2
seed=4
set.seed(i)
x_all = as.matrix(x_all)
train_label = sample(1:nrow(x_all), round(nrow(x_all)*2/3))
x = x_all[train_label, ]
y = y_all[train_label, ]
x_test = x_all[-c(train_label), ]
y_test = y_all[-c(train_label), ]
cox.powell.seq = BeSS::bess(x, y, type = 'bsrr', method = "psequential",
family = "cox", s.min=1, s.max=30,
lambda.max = 100, lambda.min=0.01, tune = "cv", nlambda = 100,
screening.num = 30)
norm.powell = max(abs(cox.powell.seq$beta))
pred.powell= x_test %*% cox.powell.seq$beta
C_index1.powell =  Cindex(pred.powell, Surv(y_test[,1], y_test[,2]))
C_index1.powell = ifelse(C_index1.powell <0.5, 1-C_index1.powell, C_index1.powell)
C_index2.powell = 0 # ifelse(rcorr.cens(pred.powell, Surv(y_test[, 1], y_test[, 2]))[[1]] < 0.5, 1-rcorr.cens(pred.powell, Surv(y_test[, 1], y_test[, 2]))[[1]], rcorr.cens(pred.powell, Surv(y_test[, 1], y_test[, 2]))[[1]]) # rcorr.cens(pred.powell, Surv(y_test[, 1], y_test[, 2]))[[1]]
iauc.powell = rep(0,3)#iAUC(x, y, x_test,Surv(y_test[,1], y_test[,2]), cox.powell.seq$beta, median(y_test[, 1]))
AUC.powell <- survivalROC(Stime = y_test[, 1],
status = y_test[, 2],
marker = pred.powell,
predict.time = median(y_test[, 1]),
span = 0.25*length((y_test[, 1]))^(-0.20), method = "NNE")$AUC
if(AUC.powell<0.5) AUC.powell = 1-AUC.powell
k.powell = sum(ifelse(abs(cox.powell.seq$beta) > 1e-6, 1, 0))
res.powell.seq = c(norm = norm.powell,  C_index1 =  C_index1.powell,C_index2 =  C_index2.powell, iauc=iauc.powell, IAUC=AUC.powell, k = k.powell)
res.powell.seq
remove.packages("BeSS", lib="~/R/win-library/3.6")
load(url(https://github.com/Mamba413/bess/blob/JiangKK/data/trim32.rda))
load(url('https://github.com/Mamba413/bess/blob/JiangKK/data/trim32.rda'))
Sys.setenv(Lang='en')
load(url('https://github.com/Mamba413/bess/blob/JiangKK/data/trim32.rda'))
readRDS(url('https://github.com/Mamba413/bess/blob/JiangKK/data/trim32.rda'))
load("C:/Users/test/OneDrive/coding/pkgs/bess/data/trim32.RData")
dim(X)
X <- trim32$x
Y <- trim32$y
dim(X)
fit.seq <- bess(X, Y, method = "sequential")
library(BeSS)
fit.seq <- bess(X, Y, method = "sequential")
summary(fit.seq)
bm.seq <- fit.seq$bestmodel
summary(bm.seq)
class(bm.seq)
fit.seq$bestmodel
library(BeSS)
fit.seq <- bess(X, Y, method = "sequential")
summary(fit.seq)
bm.seq <- fit.seq$bestmodel
summary(bm.seq)
pred.seq <- predict(fit.seq, newdata = data$x)
plot(fit.seq, type = "both", breaks = TRUE)
plot(fit.seq, type = "both", breaks = TRUE)
fit.gs <- bess(X, Y, family = "gaussian", method = "gsection")
fit.gs <- bess(X, Y, family = "gaussian", method = "gsection")
fit.gs <- bess(X, Y, family = "gaussian", method = "gsection")
fit.gs <- bess(X, Y, family = "gaussian", method = "gsection")
bm.gs <- fit.gs$bestmodel
summary(bm.gs)
beta <- coef(fit.gs, sparse = TRUE)
class(beta)
pred.gs <- predict(fit.gs, newdata = X)
devtools::document()
devtools::check()
devtools::document()
library(BeSS)
devtools::check()
devtools::check()
devtools::check()
devtools::check()
library(BeSS)
devtools::check()
library(devtools)
spell_check()
document()
check_rhub()
library(BeSS)
check_rhub()
devtools::spell_check()
document
document()
devtools::document()
devtools::document()
library(BeSS)
Tbeta <- rep(0, 20)
Tbeta[c(1, 2, 5, 9)] <- c(3, 1.5, -2, -1)
data <- gen.data(n = 200, p = 20, family = "gaussian", beta = Tbeta,
rho = 0.2, seed = 123)
fit.one <- bess.one(data$x, data$y, s = 4, family = "gaussian")
print(fit.one)
summary(fit.one)
coef(fit.one, sparse = FALSE)
pred.one <- predict(fit.one, newdata = data$x)
bm.one <- fit.one$bestmodel
summary(bm.one)
devtools::document()
devtools::document()
devtools::document()
devtools::document()
library(devtools)
check_rhub()
check_rhub()
library(devtools)
document()
